/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Homework1;

import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;

public class App {

    public static void main(String[] args) {
        port(getHerokuAssignedPort());

        get("/", (req, res) -> "Hello, World");

        post("/compute", (req, res) -> {
          //System.out.println(req.queryParams("input1"));
          //System.out.println(req.queryParams("input2"));

          String input1 = req.queryParams("input1");
          java.util.Scanner sc1 = new java.util.Scanner(input1);
          sc1.useDelimiter("[;\r\n]+");
          ArrayList<Integer> inputList = new ArrayList<>();
          while (sc1.hasNext())
          {
            int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
            inputList.add(value);
          }
          sc1.close();

          int[] inputArr = new int[inputList.size()];
          int i=0;
          for(Integer e : inputList){
                inputArr[i]=e.intValue();
                i++;
          }

          String input2 = req.queryParams("input2").replaceAll("\\s","");
          int input2AsInt = Integer.parseInt(input2);

          String input3 = req.queryParams("input3").replaceAll("\\s","");
          int input3AsInt = Integer.parseInt(input3);

          String input4 = req.queryParams("input4").replaceAll("\\s","");
          int input4AsInt = Integer.parseInt(input4);

          int[] result = new int[input2AsInt]; //max length
          result = App.createArrayWithLimits(inputArr, input2AsInt, input3AsInt, input4AsInt);

          Map<String, String> map = new HashMap<String, String>();
          map.put("result", arrToString(result));
          return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());


        get("/compute",
            (rq, rs) -> {
              Map<String, String> map = new HashMap<String, String>();
              map.put("result", "not computed yet!");
              return new ModelAndView(map, "compute.mustache");
            },
            new MustacheTemplateEngine());
    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; //return default port if heroku-port isn't set (i.e. on localhost)
    }

    public static String arrToString(int[] arr){
        String s="";
        for(int i=0;i<arr.length;i++){
            if(i>0){
                if(arr[i]<arr[i-1]){ //end
                    break;
                }
            }
            s=s+arr[i]+" ";
        }
        return s;
    }

    public static int[] createArrayWithLimits(int[] arr,int maxLength,int minElement,int maxElement){
        
        //check input array
        if( arr==null ){
            return null;
        }
        if( arr.length == 0){
            return null;
        }

        //sorting input array
        Arrays.sort(arr);

        //create array
        int[] newArr = new int[maxLength]; 

        int i=0;
        //min kontrol
        if(arr[arr.length-1]<minElement){
            return null;
        }
        //max kontrol
        if(arr[0]>maxElement){
            return null;
        }
        //starting point
        while(arr[i]<minElement){
            i++;
        }      

        int j=0;
        for(;i<arr.length;i++){
            //ending point
            if(arr[i]>maxElement || j>(maxLength-1)){
                break;
            }
            newArr[j]=arr[i];
            j++;
        }
        return newArr;
    }
}
